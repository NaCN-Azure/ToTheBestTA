package com.androlua;

import java.io.IOException;
import java.io.Reader;

public class LuaLexer
{
  public static final int YYEOF = -1;
  public static final int YYINITIAL = 0;
  private static final int[] a = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6 };
  private static final char[] b = a("\t\034\001\003\001\002\001\000\001\003\001\001\016\034\004\033\001\003\001+\001\031\001*\001\004\0010\001:\001\035\0012\0013\001/\001\t\0016\001\016\001\r\0011\001\013\t\006\0018\0017\001-\001\027\001,\001\033\001=\004\007\001\b\001\007\t\004\001\n\007\004\001\f\002\004\001\026\001\032\001\030\0019\001\004\001\033\001\036\001\037\001%\001\025\001\020\001#\001\021\001(\001\022\001\004\001 \001!\001<\001\024\001\023\001'\001\004\001\017\001\"\001&\001$\001\004\001)\001\f\002\004\0014\001;\0015\001.\006\034\001\005\032\034\001\000\001\033\004\004\004\033\001\004\002\033\001\034\007\033\001\004\004\033\001\004\005\033\027\004\001\033\037\004\001\033Ǌ\004\004\033\f\004\016\033\005\004\007\033\001\004\001\033\001\004\021\033p\034\005\004\001\033\002\004\002\033\004\004\b\033\001\004\001\033\003\004\001\033\001\004\001\033\024\004\001\033S\004\001\033\004\001\033\005\034\002\033\004\t\033&\004\002\033\001\004\007\033'\004\007\033\001\004\001\033-\034\001\033\001\034\001\033\002\034\001\033\002\034\001\033\001\034\b\033\033\004\005\033\003\004\r\033\005\034\006\033\001\004\004\033\013\034\005\033+\004\037\034\004\033\002\004\001\034c\004\001\033\001\004\b\034\001\033\006\034\002\004\002\034\001\033\004\034\002\004\n\034\003\004\002\033\001\004\017\033\001\034\001\004\001\034\036\004\033\034\002\033Y\004\013\034\001\004\016\033\n\034!\004\t\034\002\004\004\033\001\004\005\033\026\004\004\034\001\004\t\034\001\004\003\034\001\004\005\034\022\033\031\004\003\034D\033\001\004\001\033\013\0047\033\033\034\001\033\004\0346\004\003\034\001\004\022\034\001\004\007\034\n\004\002\034\002\033\n\034\001\033\007\004\001\033\007\004\001\033\003\034\001\033\b\004\002\033\002\004\002\033\026\004\001\033\007\004\001\033\001\004\003\033\004\004\002\033\001\034\001\004\007\034\002\033\002\034\002\033\003\034\001\004\b\033\001\034\004\033\002\004\001\033\003\004\002\034\002\033\n\034\004\004\007\033\001\004\005\033\003\034\001\033\006\004\004\033\002\004\002\033\026\004\001\033\007\004\001\033\002\004\001\033\002\004\001\033\002\004\002\033\001\034\001\033\005\034\004\033\002\034\002\033\003\034\003\033\001\034\007\033\004\004\001\033\001\004\007\033\f\034\003\004\001\034\013\033\003\034\001\033\t\004\001\033\003\004\001\033\026\004\001\033\007\004\001\033\002\004\001\033\005\004\002\033\001\034\001\004\b\034\001\033\003\034\001\033\003\034\002\033\001\004\017\033\002\004\002\034\002\033\n\034\001\033\001\004\017\033\003\034\001\033\b\004\002\033\002\004\002\033\026\004\001\033\007\004\001\033\002\004\001\033\005\004\002\033\001\034\001\004\007\034\002\033\002\034\002\033\003\034\b\033\002\034\004\033\002\004\001\033\003\004\002\034\002\033\n\034\001\033\001\004\020\033\001\034\001\004\001\033\006\004\003\033\003\004\001\033\004\004\003\033\002\004\001\033\001\004\001\033\002\004\003\033\002\004\003\033\003\004\003\033\f\004\004\033\005\034\003\033\003\034\001\033\004\034\002\033\001\004\006\033\001\034\016\033\n\034\t\033\001\004\007\033\003\034\001\033\b\004\001\033\003\004\001\033\027\004\001\033\n\004\001\033\005\004\003\033\001\004\007\034\001\033\003\034\001\033\004\034\007\033\002\034\001\033\002\004\006\033\002\004\002\034\002\033\n\034\022\033\002\034\001\033\b\004\001\033\003\004\001\033\027\004\001\033\n\004\001\033\005\004\002\033\001\034\001\004\007\034\001\033\003\034\001\033\004\034\007\033\002\034\007\033\001\004\001\033\002\004\002\034\002\033\n\034\001\033\002\004\017\033\002\034\001\033\b\004\001\033\003\004\001\033)\004\002\033\001\004\007\034\001\033\003\034\001\033\004\034\001\004\b\033\001\034\b\033\002\004\002\034\002\033\n\034\n\033\006\004\002\033\002\034\001\033\022\004\003\033\030\004\001\033\t\004\001\033\001\004\002\033\007\004\003\033\001\034\004\033\006\034\001\033\001\034\001\033\b\034\022\033\002\034\r\0330\004\001\034\002\004\007\034\004\033\b\004\b\034\001\033\n\034'\033\002\004\001\033\001\004\002\033\002\004\001\033\001\004\002\033\001\004\006\033\004\004\001\033\007\004\001\033\003\004\001\033\001\004\001\033\001\004\002\033\002\004\001\033\004\004\001\034\002\004\006\034\001\033\002\034\001\004\002\033\005\004\001\033\001\004\001\033\006\034\002\033\n\034\002\033\004\004 \033\001\004\027\033\002\034\006\033\n\034\013\033\001\034\001\033\001\034\001\033\001\034\004\033\002\034\b\004\001\033$\004\004\033\024\034\001\033\002\034\005\004\013\034\001\033$\034\t\033\001\0349\033+\004\024\034\001\004\n\034\006\033\006\004\004\034\004\004\003\034\001\004\003\034\002\004\007\034\003\004\004\034\r\004\f\034\001\004\017\034\002\033&\004\001\033\001\004\005\033\001\004\002\033+\004\001\033ō\004\001\033\004\004\002\033\007\004\001\033\001\004\001\033\004\004\002\033)\004\001\033\004\004\002\033!\004\001\033\004\004\002\033\007\004\001\033\001\004\001\033\004\004\002\033\017\004\001\0339\004\001\033\004\004\002\033C\004\002\033\003\034 \033\020\004\020\033U\004\f\033ɬ\004\002\033\021\004\001\000\032\004\005\033K\004\003\033\003\004\017\033\r\004\001\033\004\004\003\034\013\033\022\004\003\034\013\033\022\004\002\034\f\033\r\004\001\033\003\004\001\033\002\034\f\0334\004 \034\003\033\001\004\003\033\002\004\001\034\002\033\n\034!\033\003\034\002\033\n\034\006\033X\004\b\033)\004\001\034\001\004\005\033F\004\n\033\035\004\003\033\f\034\004\033\f\034\n\033\n\034\036\004\002\033\005\004\013\033,\004\004\033\021\034\007\004\002\034\006\033\n\034&\033\027\004\005\034\004\0335\004\n\034\001\033\035\034\002\033\013\034\006\033\n\034\r\033\001\004X\033\005\034/\004\021\034\007\004\004\033\n\034\021\033\t\034\f\033\003\034\036\004\r\034\002\004\n\034,\004\016\034\f\033$\004\024\034\b\033\n\034\003\033\003\004\n\034$\004R\033\003\034\001\033\025\034\004\004\001\034\004\004\003\034\002\004\t\033À\004'\034\025\033\004\034Ė\004\002\033\006\004\002\033&\004\002\033\006\004\002\033\b\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\037\004\002\0335\004\001\033\007\004\001\033\001\004\003\033\003\004\001\033\007\004\003\033\004\004\002\033\006\004\004\033\r\004\005\033\003\004\001\033\007\004\003\033\013\000\005\034\030\033\002\000\005\034\001\000\017\033\002\004\023\033\001\004\n\033\001\000\005\034\005\033\006\034\001\033\001\004\r\033\001\004\020\033\r\004\003\033\033\004\025\033\r\034\004\033\001\034\003\033\f\034\021\033\001\004\004\033\001\004\002\033\n\004\001\033\001\004\003\033\005\004\006\033\001\004\001\033\001\004\001\033\001\004\001\033\004\004\001\033\013\004\002\033\004\004\005\033\005\004\004\033\001\004\021\033)\004੷\033/\004\001\033/\004\001\033\004\006\033\004\004\003\034\002\004\f\033&\004\001\033\001\004\005\033\001\004\002\0338\004\007\033\001\004\017\033\001\034\027\004\t\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033 \034/\033\001\004ǐ\033\001\000\004\033\003\004\031\033\t\004\006\034\001\033\005\004\002\033\005\004\004\033V\004\002\033\002\034\002\033\003\004\001\033Z\004\001\033\004\004\005\033)\004\003\033^\004\021\033\033\0045\033\020\004Ȁ\033ᦶ\004J\033凍\0043\033ҍ\004C\033.\004\002\033č\004\003\033\020\004\n\034\002\004\024\033/\004\001\034\004\033\n\034\001\033\031\004\007\033\001\034P\004\002\034%\033\t\004\002\033g\004\002\033\004\004\001\033\004\004\f\033\013\004M\033\n\004\001\034\003\004\001\034\004\004\001\034\027\004\005\034\020\033\001\004\007\0334\004\f\033\002\0342\004\021\034\013\033\n\034\006\033\022\034\006\004\003\033\001\004\004\033\n\034\034\004\b\034\002\033\027\004\r\034\f\033\035\004\003\033\004\034/\004\016\034\016\033\001\004\n\034&\033)\004\016\034\t\033\003\004\001\034\b\004\002\034\002\033\n\034\006\033\027\004\003\033\001\004\001\034\004\0330\004\001\034\001\004\003\034\002\004\002\034\005\004\002\034\001\004\001\034\001\004\030\033\003\004\002\033\013\004\005\034\002\033\003\004\002\034\n\033\006\004\002\033\006\004\002\033\006\004\t\033\007\004\001\033\007\004\033#\004\b\034\001\033\002\034\002\033\n\034\006\033⮤\004\f\033\027\004\004\0331\004℄\033Ů\004\002\033j\004&\033\007\004\f\033\005\004\005\033\001\004\001\034\n\004\001\033\r\004\001\033\005\004\001\033\001\004\001\033\002\004\001\033\002\004\001\033l\004!\033ū\004\022\033@\004\002\0336\004(\033\r\004\003\033\020\034\020\033\007\034\f\033\002\004\030\033\003\004\031\033\001\004\006\033\005\004\001\033\004\002\033\001\034\004\033\001\004\013\033\n\034\007\033\032\004\004\033\001\004\001\033\032\004\013\033Y\004\003\033\006\004\002\033\006\004\002\033\006\004\002\033\003\004\003\033\002\004\003\033\002\004\022\033\003\034\004\033\f\004\001\033\032\004\001\033\023\004\001\033\002\004\001\033\017\004\002\033\016\004\"\033{\004E\0335\004\033\001\034\033\035\004\003\0331\004/\033\037\004\021\033\033\0045\033\036\004\002\033$\004\004\033\b\004\001\033\005\004*\033\004\002\033\n\034͖\033\006\004\002\033\001\004\001\033,\004\001\033\002\004\003\033\001\004\002\033\027\004ª\033\026\004\n\033\032\004F\0338\004\006\033\002\004@\033\001\004\003\034\001\033\002\034\005\033\004\034\004\004\001\033\003\004\001\033\033\004\004\033\003\034\004\033\001\034 \033\035\004\0336\004\n\033\026\004\n\033\023\004\033I\004η\033\003\0345\004\017\034\037\033\n\034\020\033\003\034-\004\013\034\002\033\001\034\022\033\031\004\007\033\n\034\006\033\003\034$\004\016\034\001\033\n\034@\033\003\0340\004\016\034\004\004\013\033\n\034Ҧ\033+\004\r\034\b\033\n\034श\033ͯ\004\033c\004஝\033Я\004㏑\033ȹ\004Ӈ\033E\004\013\033\001\004.\034\020\033\004\034\r\004䁠\033\002\004Ⅳ\033\005\034\003\033\026\034\002\033\007\034\036\033\004\034\033\003\034ƻ\033U\004\001\033G\004\001\033\002\004\002\033\001\004\002\033\002\004\002\033\004\004\001\033\f\004\001\033\001\004\001\033\007\004\001\033A\004\001\033\004\004\002\033\b\004\001\033\007\004\001\033\034\004\001\033\004\004\001\033\005\004\001\033\001\004\003\033\007\004\001\033Ŕ\004\002\033\031\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\b\004\002\0332\034ᘀ\033\004\004\001\033\033\004\001\033\002\004\001\033\001\004\002\033\001\004\001\033\n\004\001\033\004\004\001\033\001\004\001\033\001\004\006\033\001\004\004\033\001\004\001\033\001\004\001\033\001\004\001\033\003\004\001\033\002\004\001\033\001\004\002\033\001\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\002\004\001\033\001\004\002\033\004\004\001\033\007\004\001\033\004\004\001\033\004\004\001\033\001\004\001\033\n\004\001\033\021\004\005\033\003\004\001\033\005\004\001\033\021\004ᅄ\033ꛗ\004)\033ဵ\004\013\033Þ\004㿢\033Ȟ\004￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033׮\033\001\034\036\033`\034\033ð\034￿\033￿\033︒\033");
  private static final int[] c = a();
  private static final int[] d = b();
  private static final int[] e = c();
  private static final String[] f = { "Unknown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
  private static final int[] g = d();
  public static final int xBLOCK_COMMENT = 12;
  public static final int xBLOCK_STRING = 8;
  public static final int xCOMMENT = 10;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSHEBANG = 2;
  public static final int xSINGLE_QUOTED_STRING = 6;
  private Reader h;
  private int i;
  private int j = 0;
  private char[] k = new char['䀀'];
  private int l;
  private int m;
  private int n;
  private int o;
  private int p;
  private int q;
  private int r;
  private boolean s = true;
  private boolean t;
  private boolean u;
  private int v = 0;
  private int w = 0;
  
  public LuaLexer(Reader paramReader)
  {
    this.h = paramReader;
  }
  
  public LuaLexer(CharSequence paramCharSequence)
  {
    this(new CharSeqReader(paramCharSequence));
  }
  
  private static int a(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i1 = paramString.length();
    int i2 = 0;
    if (i2 < i1)
    {
      int i3 = i2 + 1;
      int i4 = paramString.charAt(i2);
      int i5 = i3 + 1;
      int i6 = paramString.charAt(i3);
      for (;;)
      {
        int i7 = paramInt + 1;
        paramArrayOfInt[paramInt] = i6;
        i4--;
        if (i4 <= 0)
        {
          i2 = i5;
          paramInt = i7;
          break;
        }
        paramInt = i7;
      }
    }
    return paramInt;
  }
  
  /* Error */
  private void a(int paramInt)
  {
    // Byte code:
    //   0: getstatic 83	com/androlua/LuaLexer:f	[Ljava/lang/String;
    //   3: iload_1
    //   4: aaload
    //   5: astore_2
    //   6: goto +9 -> 15
    //   9: getstatic 83	com/androlua/LuaLexer:f	[Ljava/lang/String;
    //   12: iconst_0
    //   13: aaload
    //   14: astore_2
    //   15: new 124	java/lang/Error
    //   18: dup
    //   19: aload_2
    //   20: invokespecial 127	java/lang/Error:<init>	(Ljava/lang/String;)V
    //   23: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	24	0	this	LuaLexer
    //   0	24	1	paramInt	int
    //   5	15	2	str	String
    //   9	1	3	localArrayIndexOutOfBoundsException	ArrayIndexOutOfBoundsException
    // Exception table:
    //   from	to	target	type
    //   0	6	9	java/lang/ArrayIndexOutOfBoundsException
  }
  
  private boolean a(char paramChar, int paramInt)
  {
    if (paramInt + this.l >= this.k.length) {
      return false;
    }
    char c1 = this.k[(paramInt + this.l)];
    boolean bool = false;
    if (c1 == paramChar) {
      bool = true;
    }
    return bool;
  }
  
  private static char[] a(String paramString)
  {
    char[] arrayOfChar = new char[1114112];
    int i1 = 0;
    int i2 = 0;
    if (i1 < 2884)
    {
      int i3 = i1 + 1;
      int i4 = paramString.charAt(i1);
      int i5 = i3 + 1;
      int i6 = paramString.charAt(i3);
      for (;;)
      {
        int i7 = i2 + 1;
        arrayOfChar[i2] = i6;
        i4--;
        if (i4 <= 0)
        {
          i1 = i5;
          i2 = i7;
          break;
        }
        i2 = i7;
      }
    }
    return arrayOfChar;
  }
  
  private static int[] a()
  {
    int[] arrayOfInt = new int['à'];
    a("\001\000\001\001\005\000\001\002\002\003\001\004\001\005\001\006\001\007\001\006\001\b\001\t\007\005\001\n\001\013\001\f\001\r\001\002\001\016\t\005\001\017\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\002\"\001\002\001\000\002#\002\006\001\000\001\006\001$\001%\004\005\001&\001'\001(\003\005\001)\001*\001\000\001+\002\000\016\005\001,\001-\001.\001/\0010\0011\0012\0013\0014\001(\001\"\004\000\0015\002\000\002\006\0016\002\000\002\005\0017\002\005\0018\001\020\001\005\0019\001:\0014\004\005\001;\t\005\001\000\0015\001<\001\000\001\006\004\000\002\005\001=\001>\n\005\001?\001@\001A\001B\001\005\001C\002\000\001D\001\006\002\000\003\005\001E\001\005\001F\001G\002\005\001H\001\005\001I\001\005\001J\001\000\001\006\002\000\001K\001L\001M\001\005\001N\001O\002\005\003\000\001P\002\005\001Q\001\000\001R\001S\001Q\002\000\002T", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int b(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i1 = paramString.length();
    int i6;
    for (int i2 = 0; i2 < i1; i2 = i6)
    {
      int i3 = i2 + 1;
      int i4 = paramString.charAt(i2) << '\020';
      int i5 = paramInt + 1;
      i6 = i3 + 1;
      paramArrayOfInt[paramInt] = (i4 | paramString.charAt(i3));
      paramInt = i5;
    }
    return paramInt;
  }
  
  private static int[] b()
  {
    int[] arrayOfInt = new int['à'];
    b("\000\000\000>\000|\000º\000ø\000Ķ\000Ŵ\000Ʋ\000ǰ\000Ʋ\000Ȯ\000ɬ\000ʪ\000Ʋ\000˨\000̦\000ͤ\000΢\000Ϡ\000О\000ќ\000Қ\000Ә\000Ԗ\000Ք\000֒\000Ʋ\000Ʋ\000א\000Ʋ\000؎\000ٌ\000ڊ\000ۈ\000܆\000݄\000ނ\000߀\000߾\000࠼\000ࡺ\000ࢸ\000ࣶ\000ࡺ\000Ʋ\000Ʋ\000ऴ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000ॲ\000Ʋ\000র\000৮\000Ʋ\000ਬ\000੪\000ન\000૦\000Ʋ\000ତ\000ୢ\000஠\000௞\000జ\000ౚ\000ಘ\000ೖ\000ഔ\000൒\000ඐ\000ɬ\000ɬ\000ɬ\000෎\000ฌ\000๊\000ɬ\000Ʋ\000Ք\000Ʋ\000ຈ\000ໆ\000༄\000ག\000ྀ\000྾\000࿼\000်\000ၸ\000Ⴖ\000ჴ\000ᄲ\000ᅰ\000ᆮ\000ᇬ\000ሪ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000ቨ\000ኦ\000ዤ\000ન\000ጢ\000፠\000జ\000᎞\000Ꮬ\000Ʋ\000ᐚ\000ᑘ\000ᒖ\000ᓔ\000ɬ\000ᔒ\000ᕐ\000ɬ\000ɬ\000ᖎ\000Ʋ\000Ʋ\000ɬ\000ᗌ\000ᘊ\000ᙈ\000ᚆ\000ɬ\000ᛄ\000ᜂ\000ᝀ\000᝾\000ូ\000៺\000ᠸ\000ᡶ\000ᢴ\000ᣲ\000ᤰ\000᥮\000᦬\000᧪\000ୢ\000ᨨ\000ᩦ\000᪤\000᫢\000ᬠ\000᭞\000ɬ\000ᮜ\000ᯚ\000ᰘ\000᱖\000Ე\000᳒\000ᴐ\000ᵎ\000ᶌ\000᷊\000ɬ\000ɬ\000ɬ\000ɬ\000Ḉ\000ᣲ\000Ṇ\000Ẅ\000Ể\000ἀ\000Ἶ\000ὼ\000Ὰ\000Ὸ\000‶\000ɬ\000⁴\000ɬ\000ɬ\000₲\000⃰\000ɬ\000℮\000ɬ\000Ⅼ\000ɬ\000↪\000⇨\000∦\000≤\000ɬ\000ɬ\000ɬ\000⊢\000ɬ\000ɬ\000⋠\000⌞\000⍜\000⎚\000⏘\000ɬ\000␖\000⑔\000⒒\000ⓐ\000ɬ\000ɬ\000┎\000╌\000▊\000◈\000☆", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int c(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i1 = paramString.length();
    int i2 = 0;
    if (i2 < i1)
    {
      int i3 = i2 + 1;
      int i4 = paramString.charAt(i2);
      int i5 = i3 + 1;
      int i6 = '￿' + paramString.charAt(i3);
      for (;;)
      {
        int i7 = paramInt + 1;
        paramArrayOfInt[paramInt] = i6;
        i4--;
        if (i4 <= 0)
        {
          i2 = i5;
          paramInt = i7;
          break;
        }
        paramInt = i7;
      }
    }
    return paramInt;
  }
  
  private static int[] c()
  {
    int[] arrayOfInt = new int['♄'];
    c("\001\b\001\t\001\n\001\013\001\f\001\b\001\r\002\f\001\016\001\f\001\017\001\f\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\002\b\001\036\001\037\001 \001\f\001!\001\"\001#\001$\001%\001&\002\f\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001\f\001:\001\002\002\000;\002\031\000\001;A\000\001< \000\026\b\001='\b\016\000\001>/\000\016?\001@/?@\000\001\n>\000\001\013>\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\f\f\022\000\001\f\007\000\001\r\001\000\001A\002\000\001\r\001\000\001B\002\000\001A3\000\001\r\001\000\001A\002\000\001\r\001C\001B\002\000\001A3\000\001D\004\000\001D\001\000\001E>\000\001F3\000\005\f\001\000\003\f\002\000\001\f\001G\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001H\001\f\006\000\001\f\001\000\003\f\001I\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001J\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001K\001\f\006\000\001\f\001\000\005\f\001L\006\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001M\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001N\001O\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001P\002\f\001Q\002\f\006\000\001\f\001\000\f\f\022\000\001\f\027\000\001R\001S=\000\001T4\000\001U\b\000\001V*\000\005\f\001\000\003\f\002\000\005\f\001W\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001X\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001Y\002\f\006\000\001\f\001\000\001Z\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\013\f\001[\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001\\\002\f\006\000\001\f\001\000\001]\005\f\001^\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001_\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001`\002\f\006\000\001\f\001\000\001a\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001b\006\f\006\000\001\f\001\000\n\f\001c\001\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\n\f\001d\001\f\022\000\001\f,\000\001e)\000\001f=\000\001g\024\000\001h(\000\001i\025\000\001jA\000\001kD\000\001l?\000\001m>\000\001n\002\000\031;\001o\001p#;\032<\001q\002<\001o <\026\000\001r\001s4\000\001t=\000\001u5\000\001D\002\000\001v\001\000\001D\002\000\001v5\000\001w\004\000\001w8\000\003x\002\000\001x\004\000\001x\004\000\001x\b\000\002x\003\000\001x\001\000\001x\036\000\001D\004\000\001D?\000\001y?\000\001z\001{1\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001|\001}\002\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\006\f\001~\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001\007\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\005\f\001\006\f\022\000\001\f-\000\001=\000\001\025\000\005\f\001\000\003\f\002\000\006\f\001\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001\004\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\f\f\022\000\001\005\000\005\f\001\000\003\f\002\000\003\f\001\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001\007\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\001\f\001\003\f\006\000\001\f\001\000\f\f\022\000\001\f\002\000\002;\001\000\001;\001\0008;\001\000\002<\001\000\001<\001\0008<\030r\001%r\001\002\000\013\001/\026\000\001-\000\001w\001\000\001A\002\000\001w\004\000\001A3\000\002x\001\001\000\001\001x\001\000\001\002\000\001\004\000\001x\b\000\002x\003\000\001x\001\000\001x\001\000\001&\000\001A\000\001-\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001 \005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001¡\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001¢\005\f\006\000\001\f\001\000\001£\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001¤\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001¥\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001\f\001¦\n\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001§\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001¨\007\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001©\004\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001ª\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001«\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001¬\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001­\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001®\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001¯\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001°\b\f\022\000\001\f\001\000\027r\001\001±%r\001\002\000;\001\001²\001³;\026\000\001´\001,\000\002x\001\001v\001\001x\001\000\001\001v\001\000\001\004\000\001x\b\000\002x\003\000\001x\001\000\001x\001\000\001\034\000\003µ\002\000\001µ\004\000\001µ\004\000\001µ\b\000\002µ\003\000\001µ\001\000\001µ)\000\001¶A\000\001·,\000\005\f\001\000\003\f\002\000\001¸\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001¹\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001º\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001»\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001¼\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\002\f\001½\t\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001¾\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\006\f\001¿\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001À\004\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001Á\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Â\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001Ã\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001Ä\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001Å\005\f\006\000\001\f\001\000\f\f\022\000\001\f\003\000\001³>\000\001³\n\000\001Æ/\000>´\006\000\002µ\001Ç\001\000\001\001µ\004\000\001Ç\004\000\001µ\b\000\002µ\003\000\001µ\001\000\001µ\001\000\001(\000\001È:\000\001É2\000\005\f\001\000\003\f\002\000\005\f\001Ê\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Ë\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\005\f\001Ì\006\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001Í\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001Î\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\n\f\001Ï\001\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001Ð\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001Ñ\001\f\006\000\001\f\001\000\f\f\022\000\001\f\017\000\001Ò5\000\002µ\001Ç\001v\001\001µ\002\000\001v\001\000\001Ç\004\000\001µ\b\000\002µ\003\000\001µ\001\000\001µ\001\000\001)\000\001Ó:\000\001Ô1\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Õ\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001Ö\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001×\005\f\022\000\001\f\017\000\001C\000\001Ø:\000\001Ù0\000\005\f\001\000\003\f\002\000\005\f\001Ú\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001Û\005\f\006\000\001\f\001\000\f\f\022\000\001\f\004\000\001ÜL\000\001Ý+\000\001Ü\002\000;Ü\023\000\001Þ>\000\001ß,\000\001à:\000\001à\002\000;à", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int d(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i1 = paramString.length();
    int i2 = 0;
    if (i2 < i1)
    {
      int i3 = i2 + 1;
      int i4 = paramString.charAt(i2);
      int i5 = i3 + 1;
      int i6 = paramString.charAt(i3);
      for (;;)
      {
        int i7 = paramInt + 1;
        paramArrayOfInt[paramInt] = i6;
        i4--;
        if (i4 <= 0)
        {
          i2 = i5;
          paramInt = i7;
          break;
        }
        paramInt = i7;
      }
    }
    return paramInt;
  }
  
  private static int[] d()
  {
    int[] arrayOfInt = new int['à'];
    d("\001\000\001\001\005\000\001\t\001\001\001\t\003\001\001\t\f\001\002\t\001\001\001\t\016\001\002\t\001\001\006\t\001\001\001\t\002\001\001\t\003\001\001\000\001\t\003\001\001\000\016\001\001\t\001\000\001\t\002\000\016\001\013\t\004\000\001\001\002\000\002\001\001\t\002\000\b\001\002\t\017\001\001\000\002\001\001\000\001\001\004\000\024\001\002\000\002\001\002\000\016\001\001\000\001\001\002\000\b\001\003\000\004\001\001\000\003\001\002\000\002\001", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private boolean e()
  {
    this.w = 0;
    boolean bool1 = a('[', 0);
    boolean bool2 = false;
    if (bool1)
    {
      int i2;
      for (int i1 = 0;; i1 = i2)
      {
        i2 = i1 + 1;
        if (!a('=', i2)) {
          break;
        }
      }
      boolean bool3 = a('[', i2);
      bool2 = false;
      if (bool3)
      {
        this.w = i1;
        bool2 = true;
      }
    }
    return bool2;
  }
  
  private int f()
  {
    String str = yytext().toString();
    StringBuilder localStringBuilder = new StringBuilder("]");
    for (int i1 = 0; i1 < this.w; i1++) {
      localStringBuilder.append('=');
    }
    localStringBuilder.append(']');
    int i2 = str.indexOf(localStringBuilder.toString());
    if (i2 > 0) {
      return -2 + (yylength() - i2 - this.w);
    }
    return -1;
  }
  
  private boolean g()
  {
    if (this.n > 0)
    {
      this.o += this.v;
      this.v = 0;
      System.arraycopy(this.k, this.n, this.k, 0, this.o - this.n);
      this.o -= this.n;
      this.m -= this.n;
      this.l -= this.n;
      this.n = 0;
    }
    if (this.m >= this.k.length - this.v)
    {
      char[] arrayOfChar = new char[2 * this.k.length];
      System.arraycopy(this.k, 0, arrayOfChar, 0, this.k.length);
      this.k = arrayOfChar;
      this.o += this.v;
      this.v = 0;
    }
    int i1 = this.k.length - this.o;
    int i2 = this.h.read(this.k, this.o, i1);
    if (i2 == 0) {
      throw new IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (i2 > 0)
    {
      this.o = (i2 + this.o);
      if ((i2 == i1) && (Character.isHighSurrogate(this.k[(this.o - 1)])))
      {
        this.o -= 1;
        this.v = 1;
      }
      return false;
    }
    return true;
  }
  
  public LuaTokenTypes advance()
  {
    int i1 = this.o;
    Object localObject1 = this.k;
    char[] arrayOfChar1 = b;
    int[] arrayOfInt1 = e;
    int[] arrayOfInt2 = d;
    int[] arrayOfInt3 = g;
    int i2 = this.l;
    this.q += i2 - this.n;
    int i3 = this.n;
    int i4 = 0;
    while (i3 < i2)
    {
      int i21 = Character.codePointAt((char[])localObject1, i3, i2);
      int i22 = Character.charCount(i21);
      if (i21 != 133) {
        switch (i21)
        {
        default: 
          switch (i21)
          {
          default: 
            this.r = (i22 + this.r);
          }
          break;
        }
      }
      for (;;)
      {
        i4 = 0;
        break;
        this.p = (1 + this.p);
        this.r = 0;
        i4 = 1;
        break;
        if (i4 == 0)
        {
          this.p = (1 + this.p);
          this.r = 0;
          break;
          this.p = (1 + this.p);
          this.r = 0;
        }
      }
      i3 += i22;
    }
    if (i4 != 0)
    {
      int i18;
      int i19;
      Object localObject2;
      if (i2 < i1)
      {
        int i20;
        if (localObject1[i2] == '\n') {
          i20 = 1;
        } else {
          i20 = 0;
        }
        Object localObject3 = localObject1;
        i18 = i1;
        i19 = i20;
        localObject2 = localObject3;
      }
      else
      {
        if (this.t)
        {
          localObject2 = localObject1;
          i18 = i1;
        }
        boolean bool2;
        do
        {
          i19 = 0;
          break;
          bool2 = g();
          i18 = this.o;
          i2 = this.l;
          localObject2 = this.k;
        } while ((bool2) || (localObject2[i2] != '\n'));
        i19 = 1;
      }
      if (i19 != 0) {
        this.p -= 1;
      }
      i1 = i18;
      localObject1 = localObject2;
    }
    this.n = i2;
    this.m = i2;
    this.i = a[this.j];
    int i6;
    label414:
    int i5;
    if ((0x1 & arrayOfInt3[this.i]) == 1)
    {
      i6 = this.i;
      i5 = i2;
    }
    else
    {
      i5 = i2;
      i6 = -1;
    }
    label629:
    label1889:
    for (;;)
    {
      int i11;
      if (i2 < i1)
      {
        i11 = Character.codePointAt((char[])localObject1, i2, i1);
        i2 += Character.charCount(i11);
      }
      else
      {
        if (this.t) {}
        int i7;
        char[] arrayOfChar2;
        int i8;
        for (;;)
        {
          i11 = -1;
          break label629;
          this.m = i2;
          this.l = i5;
          boolean bool1 = g();
          i7 = this.m;
          i5 = this.l;
          arrayOfChar2 = this.k;
          i8 = this.o;
          if (!bool1) {
            break;
          }
          localObject1 = arrayOfChar2;
          i1 = i8;
        }
        int i9 = Character.codePointAt(arrayOfChar2, i7, i8);
        int i10 = i7 + Character.charCount(i9);
        i11 = i9;
        i1 = i8;
        i2 = i10;
        localObject1 = arrayOfChar2;
      }
      int i12 = arrayOfInt1[(arrayOfInt2[this.i] + arrayOfChar1[i11])];
      if (i12 != -1)
      {
        this.i = i12;
        int i13 = arrayOfInt3[this.i];
        if ((i13 & 0x1) != 1) {
          break label1889;
        }
        i6 = this.i;
        if ((i13 & 0x8) == 8) {
          i5 = i2;
        }
      }
      else
      {
        this.l = i5;
        if ((i11 == -1) && (this.n == this.m))
        {
          this.t = true;
          return null;
        }
        if (i6 >= 0) {
          i6 = c[i6];
        }
        int i15;
        switch (i6)
        {
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        default: 
          a(1);
          break;
        case 84: 
          return LuaTokenTypes.ENDREGION;
        case 83: 
          return LuaTokenTypes.CONTINUE;
        case 82: 
          return LuaTokenTypes.FUNCTION;
        case 81: 
          return LuaTokenTypes.REGION;
        case 80: 
          return LuaTokenTypes.DEFAULT;
        case 79: 
          return LuaTokenTypes.SWITCH;
        case 78: 
          return LuaTokenTypes.LAMBDA;
        case 77: 
          return LuaTokenTypes.ELSEIF;
        case 76: 
          return LuaTokenTypes.REPEAT;
        case 75: 
          return LuaTokenTypes.RETURN;
        case 74: 
          return LuaTokenTypes.WHILE;
        case 73: 
          return LuaTokenTypes.UNTIL;
        case 72: 
          return LuaTokenTypes.FALSE;
        case 71: 
          return LuaTokenTypes.LOCAL;
        case 70: 
          return LuaTokenTypes.BREAK;
        case 69: 
          return LuaTokenTypes.DEFER;
        case 68: 
          int i17 = f();
          if (i17 != -1)
          {
            yypushback(i17);
            yybegin(0);
            return LuaTokenTypes.BLOCK_COMMENT;
          }
          yybegin(0);
          return LuaTokenTypes.BLOCK_COMMENT;
        case 67: 
          int i16 = f();
          if (i16 != -1)
          {
            yypushback(i16);
            yybegin(0);
            return LuaTokenTypes.LONG_STRING;
          }
          yybegin(0);
          return LuaTokenTypes.BAD_CHARACTER;
        case 66: 
          return LuaTokenTypes.WHEN;
        case 65: 
          return LuaTokenTypes.THEN;
        case 64: 
          return LuaTokenTypes.TRUE;
        case 63: 
          return LuaTokenTypes.CASE;
        case 62: 
          return LuaTokenTypes.GOTO;
        case 61: 
          return LuaTokenTypes.ELSE;
        case 60: 
          yybegin(0);
          return LuaTokenTypes.DOC_COMMENT;
        case 59: 
          return LuaTokenTypes.FOR;
        case 58: 
          return LuaTokenTypes.MEAN;
        case 57: 
          return LuaTokenTypes.LEF;
        case 56: 
          return LuaTokenTypes.NIL;
        case 55: 
          return LuaTokenTypes.END;
        case 54: 
          return LuaTokenTypes.ELLIPSIS;
        case 53: 
          yybegin(0);
          return LuaTokenTypes.SHORT_COMMENT;
        case 52: 
          return LuaTokenTypes.AND;
        case 51: 
          return LuaTokenTypes.DOUBLE_COLON;
        case 50: 
          return LuaTokenTypes.DOUBLE_DIV;
        case 49: 
          return LuaTokenTypes.BIT_LTLT;
        case 48: 
          return LuaTokenTypes.LE;
        case 47: 
          return LuaTokenTypes.BIT_RTRT;
        case 46: 
          return LuaTokenTypes.GE;
        case 45: 
          return LuaTokenTypes.NE;
        case 44: 
          yybegin(2);
          return LuaTokenTypes.SHEBANG;
        case 43: 
          return LuaTokenTypes.EQ;
        case 42: 
          yybegin(8);
          yypushback(yylength());
          e();
          break;
        case 41: 
          return LuaTokenTypes.DO;
        case 40: 
          return LuaTokenTypes.OR;
        case 39: 
          return LuaTokenTypes.IF;
        case 38: 
          return LuaTokenTypes.IN;
        case 37: 
          if (e())
          {
            yypushback(yylength());
            yybegin(12);
            break;
          }
          yypushback(yylength());
          i15 = 10;
        case 36: 
        case 35: 
          for (;;)
          {
            yybegin(i15);
            break;
            return LuaTokenTypes.CONCAT;
            i15 = 10;
            yypushback(yylength());
          }
        case 34: 
          yybegin(0);
          return LuaTokenTypes.STRING;
        case 33: 
          return LuaTokenTypes.AT;
        case 32: 
          return LuaTokenTypes.BIT_OR;
        case 31: 
          return LuaTokenTypes.BIT_AND;
        case 30: 
          return LuaTokenTypes.EXP;
        case 29: 
          return LuaTokenTypes.COLON;
        case 28: 
          return LuaTokenTypes.SEMI;
        case 27: 
          return LuaTokenTypes.COMMA;
        case 26: 
          return LuaTokenTypes.RCURLY;
        case 25: 
          return LuaTokenTypes.LCURLY;
        case 24: 
          return LuaTokenTypes.RPAREN;
        case 23: 
          return LuaTokenTypes.LPAREN;
        case 22: 
          return LuaTokenTypes.DIV;
        case 21: 
          return LuaTokenTypes.MOD;
        case 20: 
          return LuaTokenTypes.MULT;
        case 19: 
          return LuaTokenTypes.BIT_TILDE;
        case 18: 
          return LuaTokenTypes.LT;
        case 17: 
          return LuaTokenTypes.GT;
        case 16: 
          return LuaTokenTypes.NOT;
        case 15: 
          return LuaTokenTypes.GETN;
        case 14: 
        case 13: 
          for (int i14 = 6;; i14 = 4)
          {
            yybegin(i14);
            yypushback(yylength());
            break;
          }
        case 12: 
          return LuaTokenTypes.RBRACK;
        case 11: 
          return LuaTokenTypes.ASSIGN;
        case 10: 
          return LuaTokenTypes.LBRACK;
        case 9: 
          return LuaTokenTypes.MINUS;
        case 8: 
          return LuaTokenTypes.DOT;
        case 7: 
          return LuaTokenTypes.PLUS;
        case 6: 
          return LuaTokenTypes.NUMBER;
        case 5: 
          return LuaTokenTypes.NAME;
        case 4: 
          return LuaTokenTypes.WHITE_SPACE;
        case 3: 
          return LuaTokenTypes.NEW_LINE;
        case 2: 
          return LuaTokenTypes.BAD_CHARACTER;
        case 1: 
          yybegin(0);
          return LuaTokenTypes.SHEBANG_CONTENT;
        }
      }
      break label414;
    }
  }
  
  public final void yybegin(int paramInt)
  {
    this.j = paramInt;
  }
  
  public int yychar()
  {
    return this.q;
  }
  
  public final char yycharat(int paramInt)
  {
    return this.k[(paramInt + this.n)];
  }
  
  public final void yyclose()
  {
    this.t = true;
    this.o = this.n;
    if (this.h != null) {
      this.h.close();
    }
  }
  
  public int yycolumn()
  {
    return this.r;
  }
  
  public final int yylength()
  {
    return this.l - this.n;
  }
  
  public int yyline()
  {
    return this.p;
  }
  
  public void yypushback(int paramInt)
  {
    if (paramInt > yylength()) {
      a(2);
    }
    this.l -= paramInt;
  }
  
  public final void yyreset(Reader paramReader)
  {
    this.h = paramReader;
    this.s = true;
    this.t = false;
    this.u = false;
    this.n = 0;
    this.o = 0;
    this.l = 0;
    this.m = 0;
    this.v = 0;
    this.r = 0;
    this.q = 0;
    this.p = 0;
    this.j = 0;
    if (this.k.length > 16384) {
      this.k = new char['䀀'];
    }
  }
  
  public final int yystate()
  {
    return this.j;
  }
  
  public final String yytext()
  {
    return new String(this.k, this.n, this.l - this.n);
  }
  
  static class CharSeqReader
    extends Reader
  {
    int a = 0;
    CharSequence b;
    
    CharSeqReader(CharSequence paramCharSequence)
    {
      this.b = paramCharSequence;
    }
    
    public void close()
    {
      this.b = null;
      this.a = 0;
    }
    
    public int read(char[] paramArrayOfChar, int paramInt1, int paramInt2)
    {
      int i = Math.min(this.b.length() - this.a, paramInt2);
      for (int j = 0; j < i; j++) {
        try
        {
          CharSequence localCharSequence = this.b;
          int k = this.a;
          this.a = (k + 1);
          int m = localCharSequence.charAt(k);
          int n = paramInt1 + 1;
          try
          {
            paramArrayOfChar[paramInt1] = m;
          }
          catch (Exception localException1) {}
          paramInt1 = n;
        }
        catch (Exception localException2) {}
      }
      if (i <= 0) {
        return -1;
      }
      return i;
    }
  }
}


/* Location:              E:\程序\作业\送给最好的TA_dex2jar.jar!\com\androlua\LuaLexer.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */